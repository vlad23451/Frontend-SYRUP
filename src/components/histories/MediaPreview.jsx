/**
 * @fileoverview –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤ –≤ –∏—Å—Ç–æ—Ä–∏–∏
 * 
 * –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
 * - –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø—Ä–µ–≤—å—é
 * - –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ø–ª–µ–µ—Ä –¥–ª—è –≤–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ
 * - –°—Å—ã–ª–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
 * - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≥–æ—Ç–æ–≤—ã–µ download_url –∏–∑ attached_files
 * - –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è —Å–µ—Ç–∫–∞ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
 */

import React, { useState, useEffect, useMemo } from 'react'

import { getMediaType, getFileIcon } from '../../services/mediaService'
import MediaPlayerModal from '../common/MediaPlayerModal'
import PlayPauseButton from '../ui/PlayPauseButton'

const MediaPreview = ({ attachedFiles = [] }) => {
  const [files, setFiles] = useState([])
  const [loading, setLoading] = useState(false)
  const [mediaPlayerOpen, setMediaPlayerOpen] = useState(false)
  const [mediaPlayerIndex, setMediaPlayerIndex] = useState(0)
  const [playingStates, setPlayingStates] = useState({})
  const [previousVolume, setPreviousVolume] = useState({})
  const [isMuted, setIsMuted] = useState({})

  // –ú–µ–º–æ–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É IDs –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
  const attachedFileIds = useMemo(() => {
    return attachedFiles.map(file => file.id).join(',')
  }, [attachedFiles])

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º download_url –Ω–∞–ø—Ä—è–º—É—é –∏–∑ attached_files
  useEffect(() => {
    if (!attachedFiles || attachedFiles.length === 0) {
      setFiles([])
      return
    }

    console.log('üìé Processing attached files:', attachedFiles)
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ñ–∞–π–ª—ã –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    const processedFiles = attachedFiles.map(file => ({
      ...file,
      name: file.filename || file.name,
      file_type: file.mime_type || file.file_type,
      // download_url —É–∂–µ –µ—Å—Ç—å –≤ —Ñ–∞–π–ª–µ, –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
      download_url: file.download_url
    }))
    
    console.log('üîó Processed files with URLs:', processedFiles)
    setFiles(processedFiles)
  }, [attachedFileIds, attachedFiles])

  // –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
  const handleImageError = (file, index) => {
    console.error('‚ùå Failed to load image:', file.download_url)
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
  const formatFileSize = (bytes) => {
    if (!bytes) return ''
    if (bytes === 0) return '0 Bytes'
    const k = 1024
    const sizes = ['Bytes', 'KB', 'MB', 'GB']
    const i = Math.floor(Math.log(bytes) / Math.log(k))
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i]
  }

  // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–µ–¥–∏–∞–ø–ª–µ–µ—Ä–∞
  const openMediaPlayer = (fileIndex) => {
    setMediaPlayerIndex(fileIndex)
    setMediaPlayerOpen(true)
  }

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–¥–∏–∞–ø–ª–µ–µ—Ä–∞
  const closeMediaPlayer = () => {
    setMediaPlayerOpen(false)
  }

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ –¥–ª—è –º–µ–¥–∏–∞–ø–ª–µ–µ—Ä–∞ (—Ç–æ–ª—å–∫–æ –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã)
  const getViewableFiles = () => {
    return files.filter(file => {
      const mediaType = file.mediaType || getMediaType(file.mime_type || file.file_type || '')
      return ['image', 'video', 'audio'].includes(mediaType)
    })
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∑–≤—É–∫–∞ (mute/unmute)
  const toggleMute = (fileId) => {
    const audio = document.querySelector(`audio[data-file-id="${fileId}"]`);
    if (!audio) return;

    const currentMuted = isMuted[fileId] || false;
    
    if (currentMuted) {
      // –í–∫–ª—é—á–∞–µ–º –∑–≤—É–∫ - –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å
      const savedVolume = previousVolume[fileId] || 0.7;
      audio.volume = savedVolume;
      audio.muted = false;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–∑—É–Ω–æ–∫ –≥—Ä–æ–º–∫–æ—Å—Ç–∏
      const fill = audio.closest('.media-audio').querySelector('.volume-fill');
      const thumb = audio.closest('.media-audio').querySelector('.volume-thumb');
      if (fill && thumb) {
        fill.style.width = `${savedVolume * 100}%`;
        thumb.style.left = `${savedVolume * 100}%`;
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É
      updateVolumeIcon(audio, savedVolume);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setIsMuted(prev => ({ ...prev, [fileId]: false }));
    } else {
      // –û—Ç–∫–ª—é—á–∞–µ–º –∑–≤—É–∫ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å
      const currentVolume = audio.volume;
      setPreviousVolume(prev => ({ ...prev, [fileId]: currentVolume }));
      
      audio.volume = 0;
      audio.muted = true;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–∑—É–Ω–æ–∫ –≥—Ä–æ–º–∫–æ—Å—Ç–∏
      const fill = audio.closest('.media-audio').querySelector('.volume-fill');
      const thumb = audio.closest('.media-audio').querySelector('.volume-thumb');
      if (fill && thumb) {
        fill.style.width = '0%';
        thumb.style.left = '0%';
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É
      updateVolumeIcon(audio, 0);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setIsMuted(prev => ({ ...prev, [fileId]: true }));
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏ –¥–∏–Ω–∞–º–∏–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è –≥—Ä–æ–º–∫–æ—Å—Ç–∏
  const updateVolumeIcon = (audio, volume) => {
    const volumeIcon = audio.closest('.media-audio').querySelector('.volume-icon svg');
    if (!volumeIcon) return;
    
    const fileId = audio.getAttribute('data-file-id');
    const muted = isMuted[fileId] || false;
    
    // –û—á–∏—â–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ SVG
    volumeIcon.innerHTML = '';
    
    if (muted || volume === 0) {
      // –ü–µ—Ä–µ—á–µ—Ä–∫–Ω—É—Ç—ã–π –¥–∏–Ω–∞–º–∏–∫ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ –∑–≤—É–∫–∞ –∏–ª–∏ –Ω—É–ª–µ–≤–æ–π –≥—Ä–æ–º–∫–æ—Å—Ç–∏
      volumeIcon.innerHTML = `
        <polygon points="11 5 6 9 2 9 2 15 6 15 11 19 11 5" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
        <line x1="2" y1="2" x2="22" y2="22" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
      `;
    } else if (volume < 0.3) {
      // –¢–∏—Ö–æ - —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤–∞—è –∏–∫–æ–Ω–∫–∞
      volumeIcon.innerHTML = `
        <polygon points="11 5 6 9 2 9 2 15 6 15 11 19 11 5" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
      `;
    } else if (volume < 0.7) {
      // –°—Ä–µ–¥–Ω–µ - –æ–¥–Ω–∞ –≤–æ–ª–Ω–∞
      volumeIcon.innerHTML = `
        <polygon points="11 5 6 9 2 9 2 15 6 15 11 19 11 5" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
        <path d="M15.54 8.46a5 5 0 0 1 0 7.07" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
      `;
    } else {
      // –ì—Ä–æ–º–∫–æ - –¥–≤–µ –≤–æ–ª–Ω—ã
      volumeIcon.innerHTML = `
        <polygon points="11 5 6 9 2 9 2 15 6 15 11 19 11 5" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
        <path d="M19.07 4.93a10 10 0 0 1 0 14.14" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
        <path d="M15.54 8.46a5 5 0 0 1 0 7.07" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
      `;
    }
  };

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞ –ø–æ –∏–º–µ–Ω–∏
  const getMediaTypeByName = (fileName) => {
    if (!fileName) return 'other'
    
    const extension = fileName.toLowerCase().split('.').pop()
    
    // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if (['jpg', 'jpeg', 'png', 'gif', 'webp', 'bmp', 'svg', 'ico'].includes(extension)) {
      return 'image'
    }
    
    // –í–∏–¥–µ–æ
    if (['mp4', 'avi', 'mov', 'wmv', 'flv', 'webm', 'mkv', '3gp'].includes(extension)) {
      return 'video'
    }
    
    // –ê—É–¥–∏–æ
    if (['mp3', 'wav', 'flac', 'aac', 'ogg', 'wma', 'm4a'].includes(extension)) {
      return 'audio'
    }
    
    // –î–æ–∫—É–º–µ–Ω—Ç—ã
    if (['pdf', 'doc', 'docx', 'txt', 'rtf', 'xls', 'xlsx', 'ppt', 'pptx'].includes(extension)) {
      return 'document'
    }
    
    return 'other'
  }

  // –£–¥–∞–ª–∏–ª–∏ —Ñ—É–Ω–∫—Ü–∏—é calculateDynamicSize - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º CSS –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è

  // –†–µ–Ω–¥–µ—Ä –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
  const renderMediaFile = (file, index) => {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
    let mediaType = file.mediaType || getMediaType(file.mime_type || file.file_type || '')
    
    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ MIME —Ç–∏–ø—É, –ø—Ä–æ–±—É–µ–º –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    if (mediaType === 'other' && (file.name || file.filename)) {
      mediaType = getMediaTypeByName(file.name || file.filename)
    }
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å download_url, –ø—Ä–æ–±—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ URL
    if (mediaType === 'other' && file.download_url) {
      mediaType = getMediaTypeByName(file.download_url)
    }

    console.log('üé® Rendering file:', {
      id: file.id,
      name: file.name || file.filename,
      mediaType,
      download_url: file.download_url
    })
    
    switch (mediaType) {
      case 'image':
        return (
          <div key={file.id} className="media-preview-item media-image">
            <img 
              src={file.download_url} 
              alt="–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è" 
              className="media-preview-img"
              onError={() => handleImageError(file, index)}
              onLoad={() => console.log('‚úÖ Image loaded:', file.download_url)}
              onClick={() => openMediaPlayer(index)}
              loading="lazy"
              style={{ cursor: 'pointer' }}
              title="–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤ –ø–æ–ª–Ω–æ–º —Ä–∞–∑–º–µ—Ä–µ"
            />
            {file.description && (
              <div className="media-preview-caption">{file.description}</div>
            )}
          </div>
        )

      case 'video':
        return (
          <div key={file.id} className="media-preview-item media-video">
            <div className="media-preview-video-container" onClick={() => openMediaPlayer(index)}>
              <video 
                controls 
                className="media-preview-video"
                onError={() => handleImageError(file, index)}
                preload="metadata"
                onClick={(e) => e.stopPropagation()}
              >
                <source src={file.download_url} type={file.file_type} />
                –í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤–∏–¥–µ–æ.
              </video>
              <div className="media-preview-overlay">
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" title="–û—Ç–∫—Ä—ã—Ç—å –≤ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ">
                  <circle cx="11" cy="11" r="8"/>
                  <path d="M21 21l-4.35-4.35"/>
                </svg>
              </div>
            </div>
            {file.description && (
              <div className="media-preview-caption">{file.description}</div>
            )}
          </div>
        )

      case 'audio':
        return (
          <div key={file.id} className="media-preview-item media-audio">
            <div className="audio-player-container">
              {/* –ö–Ω–æ–ø–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è */}
              <PlayPauseButton
                isPlaying={playingStates[file.id] || false}
                onClick={() => {
                  const audio = document.querySelector(`audio[data-file-id="${file.id}"]`);
                  if (audio) {
                    if (audio.paused) {
                      audio.play();
                      setPlayingStates(prev => ({ ...prev, [file.id]: true }));
                    } else {
                      audio.pause();
                      setPlayingStates(prev => ({ ...prev, [file.id]: false }));
                    }
                  }
                }}
                title="–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏/–ü–∞—É–∑–∞"
              />
              
              {/* –û–±–ª–æ–∂–∫–∞/–∏–∫–æ–Ω–∫–∞ */}
              <div className="audio-cover">
                <svg width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                  <path d="M9 18V5l12-2v13"/>
                  <circle cx="6" cy="18" r="3"/>
                  <circle cx="18" cy="16" r="3"/>
                </svg>
              </div>
              
              {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–µ–∫–µ */}
              <div className="audio-info">
                <div className="audio-title">{file.name || file.filename || '–ê—É–¥–∏–æ —Ñ–∞–π–ª'}</div>
              </div>
              
              {/* –ò–∫–æ–Ω–∫–∞ –¥–∏–Ω–∞–º–∏–∫–∞ */}
              <div className="volume-icon" onClick={() => toggleMute(file.id)} style={{ cursor: 'pointer' }}>
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                  <polygon points="11 5 6 9 2 9 2 15 6 15 11 19 11 5"/>
                  <path d="M19.07 4.93a10 10 0 0 1 0 14.14M15.54 8.46a5 5 0 0 1 0 7.07"/>
                </svg>
              </div>
              
              {/* –ü–æ–ª–æ—Å–∞ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ */}
              <div className="audio-volume-slider">
                <div className="volume-container">
                  <div 
                    className="volume-track"
                    onMouseMove={(e) => {
                      const rect = e.currentTarget.getBoundingClientRect();
                      const mouseX = e.clientX - rect.left;
                      const percentage = Math.max(0, Math.min(1, mouseX / rect.width));
                      const percentDisplay = e.target.closest('.volume-container').querySelector('.volume-percent');
                      if (percentDisplay) {
                        percentDisplay.textContent = `${Math.round(percentage * 100)}%`;
                        percentDisplay.style.top = `${rect.top - 45}px`;
                        percentDisplay.style.left = `${rect.left + mouseX}px`;
                        percentDisplay.style.transform = 'translateX(-50%)';
                        percentDisplay.style.opacity = '1';
                        percentDisplay.style.display = 'block';
                      }
                    }}
                    onMouseLeave={(e) => {
                      const percentDisplay = e.target.closest('.volume-container').querySelector('.volume-percent');
                      if (percentDisplay) {
                        percentDisplay.style.opacity = '0';
                        percentDisplay.style.display = 'none';
                      }
                    }}
                    onMouseDown={(e) => {
                      e.preventDefault();
                      const rect = e.currentTarget.getBoundingClientRect();
                      const updateVolume = (clientX) => {
                        const clickX = clientX - rect.left;
                        const percentage = Math.max(0, Math.min(1, clickX / rect.width));
                        const audio = e.target.closest('.media-audio').querySelector('audio');
                        if (audio) {
                          audio.volume = percentage;
                          const fill = e.target.closest('.volume-track').querySelector('.volume-fill');
                          const thumb = e.target.closest('.volume-track').querySelector('.volume-thumb');
                          if (fill && thumb) {
                            fill.style.width = `${percentage * 100}%`;
                            thumb.style.left = `${percentage * 100}%`;
                          }
                          updateVolumeIcon(audio, percentage);
                        }
                      };
                      
                      updateVolume(e.clientX);
                      
                      const handleMouseMove = (e) => updateVolume(e.clientX);
                      const handleMouseUp = () => {
                        document.removeEventListener('mousemove', handleMouseMove);
                        document.removeEventListener('mouseup', handleMouseUp);
                      };
                      
                      document.addEventListener('mousemove', handleMouseMove);
                      document.addEventListener('mouseup', handleMouseUp);
                    }}
                    onClick={(e) => {
                      const rect = e.currentTarget.getBoundingClientRect();
                      const clickX = e.clientX - rect.left;
                      const percentage = Math.max(0, Math.min(1, clickX / rect.width));
                      const audio = e.target.closest('.media-audio').querySelector('audio');
                      if (audio) {
                        audio.volume = percentage;
                        const fill = e.target.closest('.volume-track').querySelector('.volume-fill');
                        const thumb = e.target.closest('.volume-track').querySelector('.volume-thumb');
                        if (fill && thumb) {
                          fill.style.width = `${percentage * 100}%`;
                          thumb.style.left = `${percentage * 100}%`;
                        }
                        updateVolumeIcon(audio, percentage);
                      }
                    }}
                  >
                    <div className="volume-fill"></div>
                    <div className="volume-thumb"></div>
                  </div>
                  <div className="volume-percent" style={{display: 'none'}}>0%</div>
                </div>
              </div>
            </div>
            
            {/* –ü–ª–µ–µ—Ä - —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä */}
            <div className="audio-player-controls">
              <audio 
                data-file-id={file.id}
                className="media-preview-audio"
                controlsList="nodownload"
                onError={() => handleImageError(file, index)}
                onLoadedMetadata={(e) => {
                  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å
                  e.target.volume = 0.7;
                  const fill = e.target.closest('.media-audio').querySelector('.volume-fill');
                  const thumb = e.target.closest('.media-audio').querySelector('.volume-thumb');
                  if (fill && thumb) {
                    fill.style.width = '70%';
                    thumb.style.left = '70%';
                  }
                  
                  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
                  const progressFill = e.target.closest('.media-audio').querySelector('.audio-progress-fill');
                  if (progressFill) {
                    progressFill.style.width = '0%';
                  }
                  
                  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∫–æ–Ω–∫—É –¥–∏–Ω–∞–º–∏–∫–∞
                  updateVolumeIcon(e.target, 0.7);
                }}
                onPlay={(e) => {
                  const fileId = e.target.getAttribute('data-file-id');
                  setPlayingStates(prev => ({ ...prev, [fileId]: true }));
                }}
                onPause={(e) => {
                  const fileId = e.target.getAttribute('data-file-id');
                  setPlayingStates(prev => ({ ...prev, [fileId]: false }));
                }}
                onEnded={(e) => {
                  const fileId = e.target.getAttribute('data-file-id');
                  setPlayingStates(prev => ({ ...prev, [fileId]: false }));
                }}
                onTimeUpdate={(e) => {
                  const audio = e.target;
                  const currentTime = audio.currentTime;
                  const duration = audio.duration;
                  const minutes = Math.floor(currentTime / 60);
                  const seconds = Math.floor(currentTime % 60);
                  const timeString = `${minutes}:${seconds.toString().padStart(2, '0')}`;
                  
                  const timeDisplay = e.target.closest('.media-audio').querySelector('.audio-current-time');
                  if (timeDisplay) {
                    timeDisplay.textContent = timeString;
                  }
                  
                  // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
                  if (duration > 0) {
                    const progress = (currentTime / duration) * 100;
                    const progressFill = e.target.closest('.media-audio').querySelector('.audio-progress-fill');
                    if (progressFill) {
                      progressFill.style.width = `${Math.max(0, Math.min(100, progress))}%`;
                    }
                  }
                }}
              preload="metadata"
              >
                <source src={file.download_url} type={file.file_type} />
                –í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∞—É–¥–∏–æ.
              </audio>
              <div className="audio-progress-container">
                <div className="progress-container">
                  <div 
                    className="audio-progress-track"
                    onMouseMove={(e) => {
                      const rect = e.currentTarget.getBoundingClientRect();
                      const mouseX = e.clientX - rect.left;
                      const percentage = Math.max(0, Math.min(1, mouseX / rect.width));
                      const audio = e.target.closest('.media-audio').querySelector('audio');
                      if (audio && audio.duration) {
                        const timeAtPosition = percentage * audio.duration;
                        const minutes = Math.floor(timeAtPosition / 60);
                        const seconds = Math.floor(timeAtPosition % 60);
                        const timeString = `${minutes}:${seconds.toString().padStart(2, '0')}`;
                        
                        const timeDisplay = e.target.closest('.progress-container').querySelector('.progress-time');
                        if (timeDisplay) {
                          timeDisplay.textContent = timeString;
                          timeDisplay.style.top = `${rect.top - 45}px`;
                          timeDisplay.style.left = `${rect.left + mouseX}px`;
                          timeDisplay.style.transform = 'translateX(-50%)';
                          timeDisplay.style.opacity = '1';
                          timeDisplay.style.display = 'block';
                        }
                      }
                    }}
                    onMouseLeave={(e) => {
                      const timeDisplay = e.target.closest('.progress-container').querySelector('.progress-time');
                      if (timeDisplay) {
                        timeDisplay.style.opacity = '0';
                        timeDisplay.style.display = 'none';
                      }
                    }}
                    onMouseDown={(e) => {
                      e.preventDefault();
                      const rect = e.currentTarget.getBoundingClientRect();
                      const updateProgress = (clientX) => {
                        const clickX = clientX - rect.left;
                        const percentage = Math.max(0, Math.min(1, clickX / rect.width));
                        const audio = e.target.closest('.media-audio').querySelector('audio');
                        if (audio && audio.duration) {
                          audio.currentTime = percentage * audio.duration;
                        }
                      };
                      
                      updateProgress(e.clientX);
                      
                      const handleMouseMove = (e) => updateProgress(e.clientX);
                      const handleMouseUp = () => {
                        document.removeEventListener('mousemove', handleMouseMove);
                        document.removeEventListener('mouseup', handleMouseUp);
                      };
                      
                      document.addEventListener('mousemove', handleMouseMove);
                      document.addEventListener('mouseup', handleMouseUp);
                    }}
                    onClick={(e) => {
                      const rect = e.currentTarget.getBoundingClientRect();
                      const clickX = e.clientX - rect.left;
                      const percentage = Math.max(0, Math.min(1, clickX / rect.width));
                      const audio = e.target.closest('.media-audio').querySelector('audio');
                      if (audio && audio.duration) {
                        audio.currentTime = percentage * audio.duration;
                      }
                    }}
                  >
                    <div className="audio-progress-fill"></div>
                  </div>
                  <div className="progress-time" style={{display: 'none'}}>0:00</div>
                </div>
                
                {/* –í—Ä–µ–º—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∞ –æ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ */}
                <div className="audio-time-display">
                  <span className="audio-current-time">0:00</span>
                </div>
              </div>
            </div>
            
            {file.description && (
              <div className="media-preview-caption">{file.description}</div>
            )}
          </div>
        )

      case 'document':
      default:
        return (
          <div key={file.id} className="media-preview-item media-document">
            <a 
              href={file.download_url} 
              className="media-document-link"
              download={file.name || file.filename}
              target="_blank"
              rel="noopener noreferrer"
            >
              <div className="media-document-icon">
                {getFileIcon(mediaType)}
              </div>
              <div className="media-document-info">
                <span className="media-document-name">{file.name || file.filename || '–§–∞–π–ª'}</span>
                {(file.size || file.file_size) && (
                  <span className="media-document-size">{formatFileSize(file.size || file.file_size)}</span>
                )}
              </div>
              <div className="media-document-download">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                  <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/>
                  <polyline points="7,10 12,15 17,10"/>
                  <line x1="12" y1="15" x2="12" y2="3"/>
                </svg>
              </div>
            </a>
            {file.description && (
              <div className="media-preview-caption">{file.description}</div>
            )}
          </div>
        )
    }
  }

  if (!files.length && !loading) {
    return null
  }

  if (loading) {
    return (
      <div className="media-preview-loading">
        <span>–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤...</span>
      </div>
    )
  }

  return (
    <div className="media-preview">
      <div className={`media-preview-grid ${files.length === 1 ? 'single' : files.length === 2 ? 'double' : 'multiple'}`}>
        {files.map((file, index) => renderMediaFile(file, index))}
      </div>
      
      <MediaPlayerModal
        isOpen={mediaPlayerOpen}
        onClose={closeMediaPlayer}
        files={getViewableFiles()}
        initialIndex={mediaPlayerIndex}
      />
    </div>
  )
}

export default MediaPreview
