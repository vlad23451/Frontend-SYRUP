/**
 * @fileoverview –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ–¥–∏–∞ —Ñ–∞–π–ª–∞–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ö –∏—Å—Ç–æ—Ä–∏–π
 * 
 * –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
 * - –í—ã–±–æ—Ä —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è
 * - –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
 * - –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä 
 * - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∑–∞–≥—Ä—É–∑–∫–∏
 * - –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞
 */

import React, { useRef, useState } from 'react'
import { uploadFile, getMediaType, getFileIcon } from '../../services/mediaService'

const MediaUpload = ({ attachedFiles, onFilesChange, loading: formLoading, error: uploadError, setError }) => {
  const [attachOpen, setAttachOpen] = useState(false)
  const [uploadingFiles, setUploadingFiles] = useState(new Set())
  
  // –†–µ—Ñ—ã –¥–ª—è —Å–∫—Ä—ã—Ç—ã—Ö input —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  const photoVideoInputRef = useRef(null)
  const audioInputRef = useRef(null)
  const docsInputRef = useRef(null)
  const otherInputRef = useRef(null)

  // –û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –ø–∏–∫–µ—Ä–∞
  const openPicker = (ref) => {
    setAttachOpen(false)
    if (ref && ref.current) {
      ref.current.click()
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤
  const handleFileSelect = async (e) => {
    const files = Array.from(e.target.files)
    if (files.length === 0) return

    setError('')
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è"
    const newUploadingFiles = new Set(uploadingFiles)
    files.forEach(file => newUploadingFiles.add(file.name))
    setUploadingFiles(newUploadingFiles)

    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
      const uploadPromises = files.map(async (file) => {
        try {
          const uploadedFile = await uploadFile(file)
          return {
            ...uploadedFile,
            originalFile: file,
            mediaType: getMediaType(file.type),
            name: file.name,
            size: file.size
          }
        } catch (error) {
          console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ ${file.name}:`, error)
          throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${file.name}: ${error.message}`)
        }
      })

      const uploadedFiles = await Promise.all(uploadPromises)
      
      // –î–æ–±–∞–≤–ª—è–µ–º —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∫ —É–∂–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–º
      onFilesChange([...attachedFiles, ...uploadedFiles])
      
    } catch (error) {
      setError(error.message)
    } finally {
      // –£–±–∏—Ä–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è "–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è"
      const updatedUploadingFiles = new Set(uploadingFiles)
      files.forEach(file => updatedUploadingFiles.delete(file.name))
      setUploadingFiles(updatedUploadingFiles)
      
      // –û—á–∏—â–∞–µ–º input
      e.target.value = ''
    }
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
  const removeFile = (fileToRemove) => {
    onFilesChange(attachedFiles.filter(file => file.id !== fileToRemove.id))
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
  const formatFileSize = (bytes) => {
    if (bytes === 0) return '0 Bytes'
    const k = 1024
    const sizes = ['Bytes', 'KB', 'MB', 'GB']
    const i = Math.floor(Math.log(bytes) / Math.log(k))
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i]
  }

  return (
    <div className="media-upload">
      {/* –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è –∏ –º–µ–Ω—é */}
      <div className="form-attach-row">
        <div className="form-attach-bar">
          <button
            type="button"
            className="attach-trigger"
            aria-haspopup="true"
            aria-expanded={attachOpen}
            onClick={() => setAttachOpen((v) => !v)}
            disabled={formLoading}
            title="–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å"
          >
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" aria-hidden>
              <path d="M21.44 11.05L12 20.49a6 6 0 1 1-8.49-8.49l9.19-9.19a4 4 0 1 1 5.66 5.66l-9.19 9.19a2 2 0 1 1-2.83-2.83l8.49-8.49"/>
            </svg>
          </button>
          
          {attachOpen && (
            <div className="attach-menu" role="menu">
              <button type="button" className="attach-item" onClick={() => openPicker(photoVideoInputRef)} role="menuitem">
                <span className="attach-ico">üì∑</span>
                –§–æ—Ç–æ/–í–∏–¥–µ–æ
              </button>
              <button type="button" className="attach-item" onClick={() => openPicker(audioInputRef)} role="menuitem">
                <span className="attach-ico">üéµ</span>
                –ê—É–¥–∏–æ
              </button>
              <button type="button" className="attach-item" onClick={() => openPicker(docsInputRef)} role="menuitem">
                <span className="attach-ico">üìÑ</span>
                –î–æ–∫—É–º–µ–Ω—Ç—ã
              </button>
              <button type="button" className="attach-item" onClick={() => openPicker(otherInputRef)} role="menuitem">
                <span className="attach-ico">üì¶</span>
                –î—Ä—É–≥–æ–µ
              </button>
            </div>
          )}
          
          {/* –°–∫—Ä—ã—Ç—ã–µ input —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤ */}
          <input 
            ref={photoVideoInputRef} 
            type="file" 
            className="hidden-file-input" 
            onChange={handleFileSelect} 
            multiple 
            accept="image/*,video/*" 
            tabIndex={-1} 
          />
          <input 
            ref={audioInputRef} 
            type="file" 
            className="hidden-file-input" 
            onChange={handleFileSelect} 
            multiple 
            accept="audio/*" 
            tabIndex={-1} 
          />
          <input 
            ref={docsInputRef} 
            type="file" 
            className="hidden-file-input" 
            onChange={handleFileSelect} 
            multiple 
            accept=".pdf,.doc,.docx,.xls,.xlsx,.ppt,.pptx,.txt" 
            tabIndex={-1} 
          />
          <input 
            ref={otherInputRef} 
            type="file" 
            className="hidden-file-input" 
            onChange={handleFileSelect} 
            multiple 
            accept=".zip,.rar,.7z" 
            tabIndex={-1} 
          />
        </div>
      </div>

      {/* –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ */}
      {uploadError && (
        <div className="media-upload-error">
          <span className="error-text">{uploadError}</span>
        </div>
      )}

      {/* –°–ø–∏—Å–æ–∫ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ */}
      {(attachedFiles.length > 0 || uploadingFiles.size > 0) && (
        <div className="media-upload-list">
          {/* –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã */}
          {attachedFiles.map((file) => (
            <div key={file.id} className="media-upload-item">
              <div className="media-upload-icon">
                {getFileIcon(file.mediaType)}
              </div>
              <div className="media-upload-info">
                <span className="media-upload-name">{file.name}</span>
                <span className="media-upload-size">{formatFileSize(file.size)}</span>
              </div>
              <button
                type="button"
                className="media-upload-remove"
                onClick={() => removeFile(file)}
                disabled={formLoading}
                title="–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª"
              >
                ‚úï
              </button>
            </div>
          ))}
          
          {/* –§–∞–π–ª—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–≥—Ä—É–∑–∫–∏ */}
          {Array.from(uploadingFiles).map((fileName) => (
            <div key={`uploading-${fileName}`} className="media-upload-item uploading">
              <div className="media-upload-icon">
                ‚è≥
              </div>
              <div className="media-upload-info">
                <span className="media-upload-name">{fileName}</span>
                <span className="media-upload-status">–ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...</span>
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  )
}

export default MediaUpload
