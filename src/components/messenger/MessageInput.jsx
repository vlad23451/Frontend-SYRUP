import React, { useState, useRef } from 'react'
import { PrivateMediaService } from '../../services/privateMediaService'

const MessageInput = ({ onSend, replyTo, onCancelReply, disabled = false }) => {
  const [input, setInput] = useState('')
  const [selectedFiles, setSelectedFiles] = useState([])
  const [uploading, setUploading] = useState(false)
  const [uploadingFiles, setUploadingFiles] = useState(new Set()) // ID —Ñ–∞–π–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è
  const fileInputRef = useRef(null)

  const handleSubmit = async (e) => {
    e.preventDefault()
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è
    const hasUploadingFiles = uploadingFiles.size > 0
    const hasUnuploadedFiles = selectedFiles.some(f => !f.uploaded)
    const hasValidFiles = selectedFiles.some(f => f.uploaded && f.fileId && !f.uploadError)
    
    if ((input.trim() || hasValidFiles) && !disabled && !uploading && !hasUploadingFiles && !hasUnuploadedFiles) {
      setUploading(true)
      try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏ (—Ç–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ)
        const validFiles = selectedFiles.filter(f => f.uploaded && f.fileId && !f.uploadError)
        await onSend(input, validFiles)
        setInput('')
        setSelectedFiles([])
        setUploadingFiles(new Set())
        // –û—á–∏—â–∞–µ–º input —Ñ–∞–π–ª–∞
        if (fileInputRef.current) {
          fileInputRef.current.value = ''
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error)
      } finally {
        setUploading(false)
      }
    }
  }

  const handleFileSelect = async (e) => {
    if (disabled || uploading) return
    
    const files = Array.from(e.target.files)
    if (files.length > 0) {
      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–µ —Ñ–∞–π–ª–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
      const filesWithInfo = files.map(file => ({
        file,
        id: `${Date.now()}_${Math.random().toString(36).slice(2, 8)}`,
        typeInfo: PrivateMediaService.getFileTypeInfo(file.name),
        uploaded: false, // –§–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏
        fileId: null, // ID —Ñ–∞–π–ª–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞
        uploadError: null // –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
      }))
      
      setSelectedFiles(prev => [...prev, ...filesWithInfo])
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
      for (const fileInfo of filesWithInfo) {
        setUploadingFiles(prev => new Set([...prev, fileInfo.id]))
        
        try {
          const fileId = await PrivateMediaService.uploadFile(fileInfo.file)
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º ID
          setSelectedFiles(prev => prev.map(f => 
            f.id === fileInfo.id 
              ? { ...f, uploaded: true, fileId }
              : f
          ))
          
          console.log('–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω:', fileInfo.file.name, 'ID:', fileId)
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:', fileInfo.file.name, error)
          
          // –ü–æ–º–µ—á–∞–µ–º —Ñ–∞–π–ª –∫–∞–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Å –æ—à–∏–±–∫–æ–π
          setSelectedFiles(prev => prev.map(f => 
            f.id === fileInfo.id 
              ? { ...f, uploaded: true, uploadError: error.message }
              : f
          ))
        } finally {
          setUploadingFiles(prev => {
            const newSet = new Set(prev)
            newSet.delete(fileInfo.id)
            return newSet
          })
        }
      }
    }
  }

  const removeFile = (fileId) => {
    setSelectedFiles(prev => prev.filter(f => f.id !== fileId))
  }

  return (
    <form onSubmit={handleSubmit} className="message-form">
      {replyTo && (
        <div className="reply-preview">
          <div className="reply-title">–û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ</div>
          <div className="reply-body">
            <div className="reply-user">{replyTo.user}</div>
            <div className="reply-text">{replyTo.text?.slice(0, 160) || ''}</div>
          </div>
          <button type="button" className="reply-cancel" onClick={onCancelReply} title="–û—Ç–º–µ–Ω–∏—Ç—å">
            √ó
          </button>
        </div>
      )}
      {selectedFiles.length > 0 && (
        <div className="selected-files">
          {selectedFiles.map((fileInfo) => {
            const isUploading = uploadingFiles.has(fileInfo.id)
            const hasError = fileInfo.uploadError
            const isUploaded = fileInfo.uploaded && fileInfo.fileId && !hasError
            
            return (
              <div key={fileInfo.id} className={`selected-file ${hasError ? 'error' : ''} ${isUploaded ? 'uploaded' : ''}`}>
                <span className="file-icon">
                  {isUploading ? '‚è≥' : hasError ? '‚ùå' : isUploaded ? '‚úÖ' : fileInfo.typeInfo.icon}
                </span>
                <span className="file-name" title={fileInfo.file.name}>
                  {fileInfo.file.name}
                </span>
                <span className="file-size">
                  {formatFileSize(fileInfo.file.size)}
                </span>
                {hasError && (
                  <span className="error-message" title={fileInfo.uploadError}>
                    –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
                  </span>
                )}
                <button 
                  type="button" 
                  className="remove-file-btn"
                  onClick={() => removeFile(fileInfo.id)}
                  disabled={disabled || uploading || isUploading}
                  title="–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª"
                >
                  √ó
                </button>
              </div>
            )
          })}
        </div>
      )}
      <div className="message-input-container">
        <label className={`attach-file-btn ${disabled || uploading || uploadingFiles.size > 0 ? 'disabled' : ''}`} title="–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª">
          <input
            ref={fileInputRef}
            type="file"
            onChange={handleFileSelect}
            style={{ display: 'none' }}
            disabled={disabled || uploading || uploadingFiles.size > 0}
            multiple
            accept="image/*,video/*,audio/*,.pdf,.doc,.docx,.txt,.zip,.rar"
          />
          üìé
        </label>
        <input
          type="text"
          className={`message-input ${disabled || uploading || uploadingFiles.size > 0 ? 'disabled' : ''}`}
          placeholder={
            uploadingFiles.size > 0 ? "–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤..." :
            uploading ? "–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è..." : 
            disabled ? "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —á–∞—Ç—É..." : 
            "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
          }
          value={input}
          onChange={e => setInput(e.target.value)}
          disabled={disabled || uploading || uploadingFiles.size > 0}
        />
        <button 
          type="submit" 
          className={`send-btn ${disabled || uploading || uploadingFiles.size > 0 ? 'disabled' : ''}`} 
          disabled={disabled || uploading || uploadingFiles.size > 0}
          title={
            uploadingFiles.size > 0 ? "–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤..." :
            uploading ? "–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è..." : 
            "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"
          }
        >
          {uploadingFiles.size > 0 ? '‚è≥' : uploading ? '‚è≥' : '‚û§'}
        </button>
      </div>
    </form>
  )
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
const formatFileSize = (bytes) => {
  if (bytes === 0) return '0 Bytes'
  
  const k = 1024
  const sizes = ['Bytes', 'KB', 'MB', 'GB']
  const i = Math.floor(Math.log(bytes) / Math.log(k))
  
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i]
}

export default MessageInput
