/**
 * @fileoverview –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–µ–¥–∏–∞ —Ñ–∞–π–ª–∞–º–∏: –∑–∞–≥—Ä—É–∑–∫–∞, –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –∫ –∏—Å—Ç–æ—Ä–∏—è–º, –ø–æ–ª—É—á–µ–Ω–∏–µ
 * 
 * –ü–æ—Ç–æ–∫ —Ä–∞–±–æ—Ç—ã:
 * 1. –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —á–µ—Ä–µ–∑ uploadFile
 * 2. –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∫ –∏—Å—Ç–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ attachFileToHistory  
 * 3. –ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª—ã –∏—Å—Ç–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ getHistoryFiles
 * 4. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ getFileById
 * 5. –û—Ç–∫—Ä–µ–ø–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å —á–µ—Ä–µ–∑ detachFile/deleteFile
 */

import { apiRequest } from '../utils/apiUtils'

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
 * @param {File} file - –§–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
 * @param {string} description - –û–ø–∏—Å–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 * @param {boolean} isPublic - –ü—É–±–ª–∏—á–Ω—ã–π –ª–∏ —Ñ–∞–π–ª (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 * @returns {Promise<{id: string, file_key: string, file_type: string, download_url: string}>}
 */
export const uploadFile = async (file, description = '', isPublic = true) => {
  const formData = new FormData()
  formData.append('file', file)
  if (description) formData.append('description', description)
  formData.append('is_public', isPublic.toString())

  return apiRequest('/media/upload', {
    method: 'POST',
    body: formData
  })
}

/**
 * –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∫ –∏—Å—Ç–æ—Ä–∏–∏
 * @param {string} fileId - ID –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞  
 * @param {string} historyId - ID –∏—Å—Ç–æ—Ä–∏–∏
 * @returns {Promise<any>}
 */
export const attachFileToHistory = async (fileId, historyId) => {
  return apiRequest('/media/attach', {
    method: 'POST',
    body: JSON.stringify({
      file_id: fileId,
      history_id: historyId
    })
  })
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö –∫ –∏—Å—Ç–æ—Ä–∏–∏
 * @param {string} historyId - ID –∏—Å—Ç–æ—Ä–∏–∏
 * @returns {Promise<Array<{id: string, file_key: string, file_type: string, download_url: string, description?: string}>>}
 */
export const getHistoryFiles = async (historyId) => {
  return apiRequest(`/media/history/${historyId}/files`)
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–∞–π–ª (–¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å—Ç–µ–∫—à–∏—Ö presigned URL)
 * @param {string} fileId - ID —Ñ–∞–π–ª–∞
 * @returns {Promise<{id: string, file_key: string, file_type: string, download_url: string}>}
 */
export const getFileById = async (fileId) => {
  return apiRequest(`/media/files/${fileId}`)
}

/**
 * –û—Ç–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –æ—Ç –∏—Å—Ç–æ—Ä–∏–∏
 * @param {string} fileId - ID —Ñ–∞–π–ª–∞
 * @param {string} historyId - ID –∏—Å—Ç–æ—Ä–∏–∏
 * @returns {Promise<any>}
 */
export const detachFile = async (fileId, historyId) => {
  return apiRequest('/media/detach', {
    method: 'POST',
    body: JSON.stringify({
      file_id: fileId,
      history_id: historyId
    })
  })
}

/**
 * –ü–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ (–∏–∑ S3 –∏ –ë–î)
 * @param {string} fileId - ID —Ñ–∞–π–ª–∞
 * @returns {Promise<any>}
 */
export const deleteFile = async (fileId) => {
  return apiRequest(`/media/files/${fileId}`, {
    method: 'DELETE',
    json: false
  })
}

/**
 * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–∞ –ø–æ MIME —Ç–∏–ø—É
 * @param {string} mimeType - MIME —Ç–∏–ø —Ñ–∞–π–ª–∞
 * @returns {'image'|'video'|'audio'|'document'|'other'}
 */
export const getMediaType = (mimeType) => {
  if (mimeType.startsWith('image/')) return 'image'
  if (mimeType.startsWith('video/')) return 'video'
  if (mimeType.startsWith('audio/')) return 'audio'
  if (mimeType.includes('pdf') || 
      mimeType.includes('document') || 
      mimeType.includes('spreadsheet') || 
      mimeType.includes('presentation') ||
      mimeType.includes('text/')) return 'document'
  return 'other'
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
 * @param {string} mediaType - –¢–∏–ø –º–µ–¥–∏–∞ ('image'|'video'|'audio'|'document'|'other')
 * @returns {string} - –≠–º–æ–¥–∑–∏ –∏–∫–æ–Ω–∫–∞
 */
export const getFileIcon = (mediaType) => {
  switch (mediaType) {
    case 'image': return 'üñºÔ∏è'
    case 'video': return 'üé•'
    case 'audio': return 'üéµ'
    case 'document': return 'üìÑ'
    default: return 'üì¶'
  }
}
