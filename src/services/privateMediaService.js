import { apiRequest } from '../utils/apiUtils'

export class PrivateMediaService {
  static async uploadFile(file) {
    try {
      const formData = new FormData()
      formData.append('file', file)

      const response = await apiRequest('/private-media/upload', {
        method: 'POST',
        body: formData
      })

      if (response && response.id) {
        return response.id
      } else {
        console.error('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞:', response)
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID —Ñ–∞–π–ª–∞')
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:', error)
      throw error
    }
  }

  static async attachFileToMessage(fileId, messageId) {
    try {
      await apiRequest('/private-media/attach', {
        method: 'POST',
        body: JSON.stringify({
          file_id: fileId,
          message_id: messageId
        })
      })
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é:', error)
      throw error
    }
  }

  static async detachFileFromMessage(fileId, messageId) {
    try {
      await apiRequest('/private-media/detach', {
        method: 'POST',
        body: JSON.stringify({
          file_id: fileId,
          message_id: messageId
        })
      })
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –æ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:', error)
      throw error
    }
  }

  static async uploadAndAttachFile(file, messageId) {
    try {
      // –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
      const fileId = await this.uploadFile(file)
      
      // –ó–∞—Ç–µ–º –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
      await this.attachFileToMessage(fileId, messageId)
      
      return fileId
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', error)
      throw error
    }
  }

  static async getFileInfo(fileId) {
    try {
      const response = await apiRequest(`/private-media/files/${fileId}`, {
        method: 'GET'
      })

      return response
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ:', error)
      throw error
    }
  }

  static getFileTypeInfo(fileName) {
    const extension = fileName.split('.').pop().toLowerCase()
    
    const imageExtensions = ['jpg', 'jpeg', 'png', 'gif', 'webp', 'bmp', 'svg']
    const videoExtensions = ['mp4', 'avi', 'mov', 'wmv', 'flv', 'webm', 'mkv']
    const audioExtensions = ['mp3', 'wav', 'ogg', 'flac', 'aac', 'm4a']
    const documentExtensions = ['pdf', 'doc', 'docx', 'txt', 'rtf', 'odt']
    const archiveExtensions = ['zip', 'rar', '7z', 'tar', 'gz']
    
    if (imageExtensions.includes(extension)) {
      return { type: 'image', icon: 'üñºÔ∏è', extension }
    } else if (videoExtensions.includes(extension)) {
      return { type: 'video', icon: 'üé•', extension }
    } else if (audioExtensions.includes(extension)) {
      return { type: 'audio', icon: 'üéµ', extension }
    } else if (documentExtensions.includes(extension)) {
      return { type: 'document', icon: 'üìÑ', extension }
    } else if (archiveExtensions.includes(extension)) {
      return { type: 'archive', icon: 'üì¶', extension }
    } else {
      return { type: 'unknown', icon: 'üìé', extension }
    }
  }
}

export default PrivateMediaService
