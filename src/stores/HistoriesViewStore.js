import { makeAutoObservable, runInAction } from 'mobx'
import { getHistoriesByIds } from '../services/historyService'

/**
 * HistoriesViewStore - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≥–ª–∞–≤–Ω–æ–π –ª–µ–Ω—Ç—ã –∏—Å—Ç–æ—Ä–∏–π
 * 
 * –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
 * - –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏—Å—Ç–æ—Ä–∏–π –∏ –ø–æ–∑–∏—Ü–∏–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
 * - –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö ID (—Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —Ä–∞–∑–º–µ—Ä–∞)
 * - –Ø–∫–æ—Ä–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ topId + offsetRatio
 * - –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –ø—Ä–∏ –¥–æ–∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
 */
class HistoriesViewStore {
  // –ö—ç—à —Ç–µ–∫—É—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –∏—Å—Ç–æ—Ä–∏–π
  histories = []
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
  page = 0
  hasMore = true
  loading = false
  error = null
  
  // –õ–æ–≥–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö/–æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω–Ω—ã—Ö ID —É–ø—Ä–æ—â–µ–Ω–∞
  viewedIds = new Set()
  renderedIds = new Set()
  
  // –Ø–∫–æ—Ä—å –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
  anchor = {
    topId: null,
    offsetRatio: 0
  }
  
  // –°—Ä–µ–∑ –≤–∏–¥–∏–º—ã—Ö ID (2-3 —ç–ª–µ–º–µ–Ω—Ç–∞)
  visibleSlice = []
  
  // –°—á–µ—Ç—á–∏–∫ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è (–≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á—ë–Ω)
  // emptyPagesCount = 0
  
  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
  MAX_VIEWED_IDS = 5000
  
  constructor() {
    makeAutoObservable(this)
  }
  
  // === –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ ===
  
  setLoading(loading) {
    this.loading = loading
  }
  
  setError(error) {
    this.error = error
  }
  
  setPage(page) {
    this.page = page
  }
  
  setHasMore(hasMore) {
    this.hasMore = hasMore
  }
  
  // === –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–º –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü ===
  
  incrementEmptyPages() {
    this.emptyPagesCount++
  }
  
  resetEmptyPages() {
    this.emptyPagesCount = 0
  }
  
  // === –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–º –∏—Å—Ç–æ—Ä–∏–π ===
  
  setHistories(histories) {
    console.log('üíæ setHistories called with', histories.length, 'items')
    this.histories = histories
    this.markRendered(histories.map(h => h.id))
  }
  
  appendHistories(newHistories) {
    this.histories = [...this.histories, ...newHistories]
  }
  
  // –£–¥–∞–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ (–ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º)
  removeHistory(historyId) {
    this.histories = this.histories.filter(h => h.id !== historyId)
    this.renderedIds.delete(historyId)
    // viewedIds –æ—Å—Ç–∞–≤–ª—è–µ–º, —á—Ç–æ–±—ã –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —É–¥–∞–ª–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é —Å–Ω–æ–≤–∞
  }
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ (–ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏)
  updateHistory(updatedHistory) {
    if (!updatedHistory?.id) return
    this.histories = this.histories.map(h => 
      h.id === updatedHistory.id ? { ...h, ...updatedHistory } : h
    )
  }
  
  // === –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è ===
  
  filterNewItems(items) {
    return items // –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞
  }
  
  // === –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–º–∏ –∏ –æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω–Ω—ã–º–∏ ID ===
  
  markViewed(ids) {
    ids.forEach(id => this.viewedIds.add(id))
    this.trimViewedIds()
  }
  
  markRendered(ids) {
    ids.forEach(id => this.renderedIds.add(id))
  }
  
  // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ viewedIds
  trimViewedIds() {
    if (this.viewedIds.size > this.MAX_VIEWED_IDS) {
      const idsArray = Array.from(this.viewedIds)
      const toRemove = idsArray.slice(0, idsArray.length - this.MAX_VIEWED_IDS)
      toRemove.forEach(id => this.viewedIds.delete(id))
    }
  }
  
  // === –Ø–∫–æ—Ä–Ω–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ===
  
  setAnchor(topId, offsetRatio, visibleSlice = []) {
    this.anchor = { topId, offsetRatio }
    this.visibleSlice = visibleSlice.slice(0, 3) // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 3 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —è–∫–æ—Ä—å –≤ —Ç–µ–∫—É—â–µ–º —Å–ø–∏—Å–∫–µ
  hasAnchorInList() {
    return this.anchor.topId && this.histories.some(h => h.id === this.anchor.topId)
  }
  
  // –ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–µ–≥–æ ID –∏–∑ visibleSlice
  findClosestFromSlice() {
    for (const id of this.visibleSlice) {
      if (this.histories.some(h => h.id === id)) {
        return id
      }
    }
    return null
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —è–∫–æ—Ä–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ ID —á–µ—Ä–µ–∑ API
  async fetchAnchorHistory() {
    if (!this.anchor.topId) return null
    
    try {
      const histories = await getHistoriesByIds([this.anchor.topId])
      return histories.length > 0 ? histories[0] : null
    } catch (error) {
      console.warn('Failed to fetch anchor history:', error)
      return null
    }
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–π –∏–∑ visibleSlice —á–µ—Ä–µ–∑ API
  async fetchVisibleSliceHistories() {
    if (this.visibleSlice.length === 0) return []
    
    try {
      const histories = await getHistoriesByIds(this.visibleSlice)
      return histories || []
    } catch (error) {
      console.warn('Failed to fetch visible slice histories:', error)
      return []
    }
  }
  
  // === –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è ===
  
  clear() {
    console.log('üßπ Clearing store (keeping viewedIds)')
    this.histories = []
    this.page = 0
    this.hasMore = true
    this.loading = false
    this.error = null
    this.anchor = { topId: null, offsetRatio: 0 }
    this.visibleSlice = []
    // viewedIds –∏ renderedIds –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–∏ –æ–±—ã—á–Ω–æ–º clear
  }
  
  // –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å (–≤–∫–ª—é—á–∞—è –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ ID)
  reset() {
    console.log('üóëÔ∏è FULL RESET - clearing everything including viewedIds')
    this.clear()
    this.viewedIds.clear()
    this.renderedIds.clear()
  }
  
  // –í—Å—Ç–∞–≤–∫–∞ —è–∫–æ—Ä–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞ (–¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è)
  insertAnchorHistory(anchorHistory) {
    if (!anchorHistory || this.histories.some(h => h.id === anchorHistory.id)) {
      return // –£–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ
    }
    
    this.histories = [anchorHistory, ...this.histories]
    this.markRendered([anchorHistory.id])
  }
  
  // === Snapshot –¥–ª—è sessionStorage (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ===
  
  createSnapshot() {
    return {
      histories: this.histories,
      page: this.page,
      hasMore: this.hasMore,
      anchor: this.anchor,
      visibleSlice: this.visibleSlice,
      viewedIds: Array.from(this.viewedIds),
      renderedIds: Array.from(this.renderedIds)
    }
  }
  
  restoreFromSnapshot(snapshot) {
    runInAction(() => {
      this.histories = snapshot.histories || []
      this.page = snapshot.page || 0
      this.hasMore = snapshot.hasMore !== false
      this.anchor = snapshot.anchor || { topId: null, offsetRatio: 0 }
      this.visibleSlice = snapshot.visibleSlice || []
      this.viewedIds = new Set(snapshot.viewedIds || [])
      this.renderedIds = new Set(snapshot.renderedIds || [])
    })
  }
  
  // === –í—ã—á–∏—Å–ª—è–µ–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ ===
  
  get isEmpty() {
    return this.histories.length === 0
  }
  
  get hasAnchor() {
    return this.anchor.topId !== null
  }
  
  get viewedCount() {
    return this.viewedIds.size
  }
  
  get hasValidAnchor() {
    return this.anchor.topId !== null && this.anchor.topId !== undefined
  }
}

export default new HistoriesViewStore()
